import java.util.regex.Matcher
import java.util.regex.Pattern

apply plugin: "java"

sourceSets.main.java.srcDirs = ["src/"]

project.ext.mainClassName = "spaceisnear.Main"
project.ext.assetsDir = new File("./assets");

task run(dependsOn: classes, type: JavaExec) {
    enableAssertions = true
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
}

task debug(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
    debug = true
}

task buildNumberino {
    def file = file("./src/spaceisnear/VersionCode.java")
    def text = file.getText()
    text = buildNumberRe(text)
    text = versionRe(text)
    file.write(text)
}
String buildNumberRe(String text){
    def vc = incrementBuildNumber()
    def pattern = Pattern.compile("BUILD_NUMBER = (\\d+)")
    def matcher = pattern.matcher(text)
    return matcher.replaceAll("BUILD_NUMBER = " + vc)
}
String versionRe(String text){
    def pattern = Pattern.compile("VERSION = (.*);")
    def matcher = pattern.matcher(text)
    return matcher.replaceAll("VERSION = \"" + version+"\";")
}

int incrementBuildNumber() {
    def versionCode = project.ext.mVersionCode
    def file = file("./gradle.properties")
    if (file.exists()) {
        def pattern = Pattern.compile("buildNumber = (\\d+)")
        def matcherVersionCode = pattern.matcher(file.getText())
        if (matcherVersionCode.find()) {
            versionCode = Integer.parseInt(matcherVersionCode.group(1))
	    if (project.ext.buildNumberIncremented) {
		println(":desktop:buildNumber — already incremented build number")
            } else {
		def manifestContent = matcherVersionCode.replaceAll("buildNumber = " + (versionCode + 1))
		println(":desktop:buildNumber — current buildNumber is " + versionCode);
		file.write(manifestContent)
                project.ext.buildNumberIncremented = true
		project.ext.mVersionCode = versionCode
	    }
        } else appendBuildNumber(file)
    } else appendBuildNumber(file)
    return mVersionCode;
}

void appendBuildNumber(File file) {
    file.append("\nbuildNumber = " + (mVersionCode + 1))
    println(":desktop:incrementBuildNumber - current buildNumber is " + mVersionCode);
}

task dist(type: Jar) {
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    from { configurations.compile.collect { zipTree(it) } }
    from files(project.assetsDir);
    libsDirName = deployFolder

    archiveName = appName + "-" + version + "-b" + mVersionCode + ".jar"
    manifest {
        attributes 'Main-Class': project.mainClassName
    }
}
classes.dependsOn buildNumberino
dist.dependsOn classes
