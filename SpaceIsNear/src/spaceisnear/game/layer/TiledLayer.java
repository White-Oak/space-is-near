// Generated by delombok at Sun Dec 01 13:28:22 MSK 2013
package spaceisnear.game.layer;

import java.util.ArrayList;
import java.util.List;
import org.newdawn.slick.Image;

/**
 * @author LPzhelud
 */
public class TiledLayer extends Layer {

    private int[][] map;//[x][y]

//    private NullLayer obstaclesMap;
    private final Image[] tiles;
    private final int tileWidth;
    private final int tileHeight;
    private final int horizontalTilesNumber;
    private final int verticalTilesNumber;
    private int maxXTiles;
    private int maxYTiles;
    private int startx;
    private int starty;
    private int startx_absolute;
    private int starty_absolute;

    public void setStartx(int startx) {
	this.startx = startx < 0 ? 0 : startx >= horizontalTilesNumber ? horizontalTilesNumber - 1 : startx;
    }

    public void setStarty(int starty) {
	this.starty = starty < 0 ? 0 : starty >= verticalTilesNumber ? verticalTilesNumber - 1 : starty;
    }

    public void moveCameraTo(int x, int y) {
	startx_absolute = x;
	starty_absolute = y;
	setStartx(startx_absolute);
	setStarty(starty_absolute);
    }

    public void moveLeft() {
	startx_absolute--;
	setStartx(startx_absolute);
    }

    public void moveRight() {
	startx_absolute++;
	setStartx(startx_absolute);
    }

    public void moveUp() {
	starty_absolute--;
	setStarty(starty_absolute);
    }

    public void moveDown() {
	starty_absolute++;
	setStarty(starty_absolute);
    }

    public void setWindowWidth(int w) {
	maxXTiles = w / tileWidth + 2;
    }

    public void setWindowHeight(int h) {
	maxYTiles = h / tileHeight + 2;
    }

    public TiledLayer(Image image, int tileWidth, int tileHeight, int width, int height) {
	super(width * tileWidth, height * tileHeight);
	if (image.getWidth() / tileWidth * tileWidth != image.getWidth() || image.getHeight() / tileHeight * tileHeight != image.getHeight()) {
	    throw new IllegalArgumentException();
	}
	this.tileHeight = tileHeight;
	this.tileWidth = tileWidth;
	tiles = chopImage(image);
	map = new int[width][height];
	horizontalTilesNumber = width;
	verticalTilesNumber = height;
    }

    //Updated on 1st January 2014
    private Image[] chopImage(Image image) {
	List<Image> list = new ArrayList<>();
	int y = 0;
	while ((y + 1) * tileHeight <= image.getHeight()) {
	    int x = 0;
	    while ((x + 1) * tileWidth <= image.getWidth()) {
		Image subImage = image.getSubImage(x * tileWidth, y * tileHeight, tileWidth, tileHeight);
		list.add(subImage);
		x++;
	    }
	    y++;
	}
	return list.toArray(new Image[list.size()]);
    }

    public void setTile(int x, int y, int tileId) {
	map[x][y] = tileId;
    }

    public int getTile(int x, int y) {
	return map[x][y];
    }

    public void fillRectTile(int x, int y, int w, int h, int tileId) {
	for (int i = y; i < y + h; i++) {
	    for (int j = x; j < w + x; j++) {
		setTile(j, i, tileId);
	    }
	}
    }

    public void paintLayer(org.newdawn.slick.Graphics g) {
	int maxw = (startx + maxXTiles) > map.length ? map.length : startx + maxXTiles;
	int maxh = (starty + maxYTiles) > map[0].length ? map[0].length : starty + maxYTiles;
	for (int i = startx; i < maxw; i++) {
	    int[] is = map[i];
	    for (int j = starty; j < maxh; j++) {
		int k = is[j];
		k--;
		if (k != -1) {
		    paintTile(g, i * tileWidth, j * tileHeight, k);
		}
	    }
	}
    }

    protected void paintTile(org.newdawn.slick.Graphics g, int x, int y, int id) {
	g.drawImage(tiles[id], x, y);
    }

    public int[][] getMap() {
	return this.map;
    }

    public void setMap(final int[][] map) {
	this.map = map;
    }

    public Image[] getTiles() {
	return this.tiles;
    }

    public int getTileWidth() {
	return this.tileWidth;
    }

    public int getTileHeight() {
	return this.tileHeight;
    }

    public int getHorizontalTilesNumber() {
	return this.horizontalTilesNumber;
    }

    public int getVerticalTilesNumber() {
	return this.verticalTilesNumber;
    }

    public int getMaxXTiles() {
	return maxXTiles;
    }

    public int getMaxYTiles() {
	return maxYTiles;
    }
    
}
