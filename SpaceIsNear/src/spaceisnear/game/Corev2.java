// Generated by delombok at Sun Dec 01 13:28:22 MSK 2013
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package spaceisnear.game;

import spaceisnear.game.console.GameConsole;
import java.io.IOException;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.newdawn.slick.GameContainer;
import org.newdawn.slick.Graphics;
import org.newdawn.slick.Input;
import org.newdawn.slick.SlickException;
import org.newdawn.slick.state.BasicGameState;
import org.newdawn.slick.state.StateBasedGame;
import spaceisnear.AbstractGameObject;
import spaceisnear.game.components.PaintableComponent;
import spaceisnear.game.console.LogString;
import spaceisnear.game.messages.MessageControlled;
import spaceisnear.game.messages.MessageTimePassed;
import spaceisnear.game.messages.MessageToSend;
import spaceisnear.game.objects.NetworkingObject;
import spaceisnear.game.objects.items.ItemsArchive;
import spaceisnear.game.objects.items.ItemsReader;

/**
 * @author LPzhelud
 */
public class Corev2 extends BasicGameState {

    private GameContext context;
    private final ArrayList<AbstractGameObject> objects = new ArrayList<>();
    private static final int QUANT_TIME = 50;
    private int key;
    public static String IP;
    private boolean notpaused;
    private GameConsole console;

    @Override
    public void init(GameContainer container, StateBasedGame sbg) throws SlickException {
	try {
	    ItemsArchive.itemsArchive = new ItemsArchive(ItemsReader.read());
	} catch (Exception ex) {
	    Logger.getLogger(Corev2.class.getName()).log(Level.SEVERE, null, ex);
	}
	context = new GameContext(new CameraMan(), objects, this);
	context.addObject(new NetworkingObject(context));
	context.getCameraMan().setWindowWidth(800);
	context.getCameraMan().setWindowHeight(600);
	context.getCameraMan().delegateWidth();
    }

    @Override
    public void enter(GameContainer container, StateBasedGame game) throws SlickException {
	console = new GameConsole(800, 0, 400, 600, container, context);
	context.setCameraToPlayer();
    }

    public void callToConnect() {
	try {
	    context.getNetworking().connect(IP, 54555);
	} catch (IOException ex) {
	    Logger.getLogger(Corev2.class.getName()).log(Level.SEVERE, null, ex);
	}
    }

    @Override
    public void update(GameContainer container, StateBasedGame sbg, int delta) throws SlickException {
	if (notpaused) {
	    MessageControlled mc = checkKeys();
	    //1 quant of time is 50L by default
//	    int quants = delta / QUANT_TIME;
	    MessageTimePassed messageTimePassed = new MessageTimePassed(delta);
	    context.sendThemAll(messageTimePassed);
	    //
	    int playerID = context.getPlayerID();
	    if (mc != null && playerID != -1) {
		context.sendDirectedMessage(new MessageToSend(mc));
	    }
	    for (AbstractGameObject gameObject : objects) {
		gameObject.process();
	    }
	}
    }

    @Override
    public void keyPressed(int key, char c) {
	this.key = key;
    }

    @Override
    public void keyReleased(int key, char c) {
	this.key = 0;
    }

    private MessageControlled checkKeys() {
	MessageControlled mc = null;
	boolean ableToMove = !context.getPlayer().getPositionComponent().isAnimation() && !console.hasFocus();
	switch (key) {
	    case Input.KEY_UP:
		if (ableToMove) {
		    mc = new MessageControlled(MessageControlled.Type.UP, context.getPlayerID());
		}
		break;
	    case Input.KEY_DOWN:
		if (ableToMove) {
		    mc = new MessageControlled(MessageControlled.Type.DOWN, context.getPlayerID());
		}
		break;
	    case Input.KEY_LEFT:
		if (ableToMove) {
		    mc = new MessageControlled(MessageControlled.Type.LEFT, context.getPlayerID());
		}
		break;
	    case Input.KEY_RIGHT:
		if (ableToMove) {
		    mc = new MessageControlled(MessageControlled.Type.RIGHT, context.getPlayerID());
		}
		break;
	}
	return mc;
    }

    @Override
    public void render(GameContainer container, StateBasedGame sbg, Graphics g) throws SlickException {
	g.scale(GameContext.SCALING_X, GameContext.SCALING_Y);
	g.pushTransform();
	context.getCameraMan().moveCamera(g);
	context.getCameraMan().paint(g);
	for (PaintableComponent paintableComponent : context.getPaintables()) {
	    paintableComponent.paint(g);
	}
//	context.getCameraMan().unmoveCamera(g);
	g.popTransform();
	console.paint(g, container);
    }

    @Override
    public int getID() {
	return 3;
    }

    public void pause() {
	notpaused = false;
    }

    public void unpause() {
	notpaused = true;
	System.out.println("Client has continued his work");
    }

    public boolean isNotpaused() {
	return this.notpaused;
    }

    @Override
    public void mouseClicked(int button, int x, int y, int clickCount) {
	if (console.intersects(x, y)) {
	    console.mouseClicked(button, x, y, clickCount);
	}
    }

    @Override
    public void mouseDragged(int oldx, int oldy, int newx, int newy) {
	console.mouseDragged(oldx, oldy, newx, newy);
    }

    public void log(LogString log) {
	if (console != null) {
	    console.pushMessage(log);
	}
    }

    @Override
    public void mouseReleased(int button, int x, int y) {
	console.mouseReleased(button, x, y);
    }

    @Override
    public void mousePressed(int button, int x, int y) {
	console.mousePressed(button, x, y);
    }
}
