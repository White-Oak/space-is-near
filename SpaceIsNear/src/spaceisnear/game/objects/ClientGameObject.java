// Generated by delombok at Sun Dec 01 13:28:22 MSK 2013
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package spaceisnear.game.objects;

import java.util.*;
import java.util.concurrent.ConcurrentLinkedQueue;
import spaceisnear.AbstractGameObject;
import spaceisnear.game.GameContext;
import spaceisnear.game.bundles.ObjectBundle;
import spaceisnear.game.components.Component;
import spaceisnear.game.components.ComponentState;
import spaceisnear.game.components.ComponentStateBundle;
import spaceisnear.game.messages.Message;

/**
 * @author LPzhelud
 */
public abstract class ClientGameObject extends AbstractGameObject {

    private final ConcurrentLinkedQueue<Message> messages = new ConcurrentLinkedQueue<>();
    private int id = -1;
    private boolean destroyed = false;
    private List<Component> components = new LinkedList<>();
    private final GameObjectType type;
    private GameContext context;

    public ClientGameObject(GameObjectType type, GameContext context) {
	this.type = type;
	this.context = context;
    }

    public void setId(int id) {
	if (this.id == -1) {
	    this.id = id;
	    for (Component component : components) {
		component.setOwnerId(id);
	    }
	}
    }

    public final synchronized void addComponents(Component... a) {
	for (Component component : a) {
	    component.setContext(context);
	}
	this.components.addAll(Arrays.asList(a));
    }

    @Override
    public final void message(Message message) {
	messages.add(message);
    }

    private synchronized GameObjectState getState() {
	ComponentStateBundle[][] states = new ComponentStateBundle[components.size()][];
	String[] classes = new String[components.size()];
	for (int i = 0; i < classes.length; i++) {
	    classes[i] = components.get(i).getClass().getName();
	    HashMap<String, ComponentState> states1 = components.get(i).getStates();
	    ComponentStateBundle[] bundles = new ComponentStateBundle[states1.size()];
	    Collection<ComponentState> values = states1.values();
	    int j = 0;
	    for (ComponentState componentState : values) {
		bundles[j] = new ComponentStateBundle(componentState);
		j++;
	    }
	    states[i] = bundles;
	}
	return new GameObjectState(states, classes);
    }

    @Override
    public final synchronized ObjectBundle getBundle() {
	return new ObjectBundle(getState(), id, type);
    }

    @Override
    public synchronized void process() {
	if (destroyed) {
	    return;
	}
	while (messages.size() > 0) {
	    Message message = messages.poll();
	    for (Component component : components) {
		component.processMessage(message);
	    }
	}
    }

    public int getId() {
	return this.id;
    }

    public boolean isDestroyed() {
	return this.destroyed;
    }

    protected void setDestroyed(final boolean destroyed) {
	this.destroyed = destroyed;
    }

    @Override
    public List<Component> getComponents() {
	return this.components;
    }

    @Override
    public GameObjectType getType() {
	return this.type;
    }

    @Override
    public GameContext getContext() {
	return this.context;
    }

    public void setContext(final GameContext context) {
	this.context = context;
    }

    protected void setComponents(List<Component> components) {
	this.components = components;
    }
}
