// Generated by delombok at Sun Dec 01 13:28:22 MSK 2013
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package spaceisnear.game;

import org.newdawn.slick.Graphics;
import org.newdawn.slick.Image;
import org.newdawn.slick.SlickException;
import spaceisnear.game.layer.*;
import spaceisnear.game.objects.Position;

/**
 * @author LPzhelud
 */
public final class CameraMan {

    private int x;
    private int y;
    private TiledLayer tiledLayer;
    private int windowWidth;
    private int windowHeight;

    public CameraMan() throws SlickException {
	final int width = GameContext.MAP_WIDTH;
	final int height = width;
	tiledLayer = new TiledLayer(new Image(getClass().getResourceAsStream("/res/tiles1.png"), "tiles", false),
		spaceisnear.game.GameContext.TILE_WIDTH, spaceisnear.game.GameContext.TILE_HEIGHT, width, height);
	tiledLayer.fillRectTile(0, 0, width, height, 5);
    }

    public void delegateWidth() {
	tiledLayer.setWindowHeight(windowHeight);
	tiledLayer.setWindowWidth(windowWidth);
    }

    public void setNewCameraPositionForMove(int deltax, int deltay) {
	if (deltax != 0) {
	    if (deltax > 0) {
		cameraRight();
	    } else {
		cameraLeft();
	    }
	} else {
	    if (deltay > 0) {
		cameraDown();
	    } else {
		cameraUp();
	    }
	}
    }

    public void moveCameraTo(int x, int y) {
	this.x = x;
	this.y = y;
	tiledLayer.moveCameraTo(x, y);
    }

    public void moveCameraToPlayer(int x, int y) {
	moveCameraTo(x - (tiledLayer.getMaxXTiles() >> 1), y - (tiledLayer.getMaxYTiles() >> 1));
    }

    private void cameraUp() {
	y--;
	tiledLayer.moveUp();
    }

    private void cameraDown() {
	y++;
	tiledLayer.moveDown();
    }

    private void cameraLeft() {
	x--;
	tiledLayer.moveLeft();
    }

    private void cameraRight() {
	x++;
	tiledLayer.moveRight();
    }

    public void moveCamera(Graphics g) {
	g.translate(-x * tiledLayer.getTileWidth(), -y * tiledLayer.getTileHeight());
    }

    public void unmoveCamera(Graphics g) {
	g.translate(x * tiledLayer.getTileWidth(), y * tiledLayer.getTileHeight());
    }

    void paint(Graphics g) {
	try {
	    tiledLayer.paintLayer(g);
	} catch (Exception e) {
	    e.printStackTrace();
	}
    }

    public TiledLayer getTiledLayer() {
	return this.tiledLayer;
    }

    public void setTiledLayer(final TiledLayer tiledLayer) {
	this.tiledLayer = tiledLayer;
    }

    public void setWindowWidth(final int windowWidth) {
	this.windowWidth = windowWidth;
    }

    public void setWindowHeight(final int windowHeight) {
	this.windowHeight = windowHeight;
    }

    public boolean belongsToCamera(Position p) {
	int px = p.getX();
	int py = p.getY();
	return (px + 1 > this.x && px - this.x < getMaxXTiles() + 1) && (py + 1 > this.y && py - this.y < getMaxYTiles() + 1);
    }

    public int getHorizontalTilesNumber() {
	return tiledLayer.getHorizontalTilesNumber();
    }

    public int getVerticalTilesNumber() {
	return tiledLayer.getVerticalTilesNumber();
    }

    public int getMaxXTiles() {
	return tiledLayer.getMaxXTiles();
    }

    public int getMaxYTiles() {
	return tiledLayer.getMaxYTiles();
    }

}
