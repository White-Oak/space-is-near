// Generated by delombok at Sun Dec 01 13:28:22 MSK 2013
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package spaceisnear.game;

import com.badlogic.gdx.graphics.OrthographicCamera;
import lombok.Getter;
import lombok.Setter;
import spaceisnear.game.objects.Position;

/**
 * @author LPzhelud
 */
public final class CameraMan {

    @Getter private int x;
    @Getter private int y;
    private int actualX, actualY;
    @Setter private int windowWidth;
    @Setter private int windowHeight;
    @Getter private final OrthographicCamera camera = new OrthographicCamera();
    @Getter private final OrthographicCamera lightsCamera = new OrthographicCamera();
    @Getter private final int horizontalTilesNumber;
    @Getter private final int verticalTilesNumber;

    public CameraMan() {
	verticalTilesNumber = GameContext.MAP_WIDTH;
	horizontalTilesNumber = verticalTilesNumber;
	camera.setToOrtho(true);
//	lightsCamera.setToOrtho(true, 1200f / GameContext.TILE_WIDTH, 600f / GameContext.TILE_HEIGHT);
	lightsCamera.setToOrtho(true);
    }

    public void animate() {
	int dx = (x * GameContext.TILE_WIDTH - actualX) / 2;
	int dy = (y * GameContext.TILE_HEIGHT - actualY) / 2;
	if (dx == 0) {
	    actualX = x * GameContext.TILE_WIDTH;
	}
	if (dy == 0) {
	    actualY = y * GameContext.TILE_HEIGHT;
	}
	actualX += dx;
	actualY += dy;
    }

    public void moveCameraTo(int x, int y) {
	this.x = x;
	this.y = y;
//	tiledLayer.moveCameraTo(x, y);
    }

    public void moveCameraToPlayer(int x, int y) {
	moveCameraTo(x - (getMaxXTiles() >> 1), y - (getMaxYTiles() >> 1));
    }

    private int savedActualX, savedActualY;

    public void moveCamera() {
	savedActualX = actualX;
	savedActualY = actualY;
	camera.translate(savedActualX, savedActualY);
	camera.update();
//	lightsCamera.translate(savedX, savedY);
	lightsCamera.translate(savedActualX, savedActualY);
	lightsCamera.update();
    }

    public void unmoveCamera() {
	camera.translate(-savedActualX, -savedActualY);
//	lightsCamera.translate(-savedX, -savedY);
	lightsCamera.translate(-savedActualX, -savedActualY);
	camera.update();
    }

    public boolean belongsToCamera(Position p, GameContext context) {
	int px = p.getX();
	int py = p.getY();
	if (px < 0 || py < 0) {
	    return false;
	}
//	final boolean xBelongs = px + 1 > this.x + 6 && px - this.x < getMaxXTiles() + 1 - 7;
//	final boolean yBelongs = py + 1 > this.y + 4 && py - this.y < getMaxYTiles() + 1 - 5;
	final boolean xBelongs = px + 2 > this.x && px - this.x < getMaxXTiles() + 1;
	final boolean yBelongs = py + 2 > this.y && py - this.y < getMaxYTiles() + 1;
	float xx = (px + 0.5f);
	float yy = (py + 0.5f);
	boolean lighted = context.getCore().getPointLight().contains(px * GameContext.TILE_WIDTH, py * GameContext.TILE_HEIGHT);
	Position position = context.getPlayer().getPosition();
	lighted |= context.getCore().getPointLight().
		contains((xx + Math.signum(position.getX() - px)) * GameContext.TILE_WIDTH,
			yy * GameContext.TILE_HEIGHT);
	lighted |= context.getCore().getPointLight().
		contains(xx * GameContext.TILE_WIDTH,
			(yy + Math.signum(position.getY() - py)) * GameContext.TILE_HEIGHT);
	lighted |= context.getCore().getPointLight().
		contains((xx + Math.signum(position.getX() - px)) * GameContext.TILE_WIDTH,
			(yy + Math.signum(position.getY() - py)) * GameContext.TILE_HEIGHT);
	return xBelongs && yBelongs && lighted;
    }

    public int getMaxXTiles() {
	return windowWidth / GameContext.TILE_WIDTH + 2;
    }

    public int getMaxYTiles() {
	return windowHeight / GameContext.TILE_HEIGHT + 2;
    }

}
