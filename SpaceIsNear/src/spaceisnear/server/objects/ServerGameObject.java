// Generated by delombok at Sun Dec 01 13:28:22 MSK 2013
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package spaceisnear.server.objects;

import java.util.*;
import lombok.*;
import spaceisnear.abstracts.AbstractGameObject;
import spaceisnear.game.components.Component;
import spaceisnear.game.objects.GameObjectType;
import spaceisnear.server.ServerContext;

/**
 * @author White Oak
 */
@RequiredArgsConstructor public abstract class ServerGameObject extends AbstractGameObject {

    @Getter private int id = -1;
    @Getter @Setter private boolean destroyed = false;
    @Getter private final GameObjectType type;
    @Getter private final ServerContext context;

    public void setId(int id) {
	if (this.id == -1) {
	    this.id = id;
	    for (Component component : getComponents()) {
		component.setOwnerId(id);
	    }
	}
    }

    public final synchronized void addComponents(Component... a) {
	for (Component component : a) {
	    component.setContext(context);
	}
	getComponents().addAll(Arrays.asList(a));
    }

    public void registerForTimeMessages() {
	if (!needsTime()) {
	    context.addTimeNeeding(this);
	}
    }

    public void unregisterForTimeMessages() {
	if (!needsTime()) {
	    context.removeTimeNeeding(this);
	}
    }

    public boolean needsTime() {
	boolean result = false;
	result = getComponents().stream()
		.map((component) -> component.needsTime())
		.reduce(result, (accumulator, _item) -> accumulator | _item);
	return result;
    }
}
