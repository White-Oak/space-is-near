// Generated by delombok at Sun Dec 01 13:28:22 MSK 2013
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package spaceisnear.server.objects;

import java.util.Arrays;
import java.util.LinkedList;
import java.util.concurrent.ConcurrentLinkedQueue;
import spaceisnear.AbstractGameObject;
import spaceisnear.Context;
import spaceisnear.game.components.Component;
import spaceisnear.game.messages.Message;
import spaceisnear.game.objects.GameObjectType;
import spaceisnear.server.ServerContext;

/**
 * @author White Oak
 */
public abstract class ServerGameObject extends AbstractGameObject {

    private final ConcurrentLinkedQueue<Message> messages = new ConcurrentLinkedQueue<>();
    private int id = -1;
    private boolean destroyed = false;
    private final LinkedList<Component> components = new LinkedList<>();
    private final GameObjectType type;
    private final ServerContext context;

    public ServerGameObject(GameObjectType type, ServerContext context) {

	this.type = type;
	this.context = context;
    }

    public void setId(int id) {
	if (this.id == -1) {
	    this.id = id;
	    for (Component component : components) {
		component.setOwnerId(id);
	    }
	}
    }

    public final synchronized void addComponents(Component... a) {
	for (Component component : a) {
	    component.setContext(context);
	}
	this.components.addAll(Arrays.asList(a));
    }

    @Override
    public final void message(Message message) {
	messages.add(message);
    }

    @Override
    public synchronized void process() {
	if (destroyed) {
	    return;
	}
	while (messages.size() > 0) {
	    Message message = messages.poll();
	    for (Component component : components) {
		component.processMessage(message);
	    }
	}
    }

    @Override
    public int getId() {
	return this.id;
    }

    public boolean isDestroyed() {
	return this.destroyed;
    }

    protected void setDestroyed(final boolean destroyed) {
	this.destroyed = destroyed;
    }

    @Override
    public LinkedList<Component> getComponents() {
	return this.components;
    }

    @Override
    public GameObjectType getType() {
	return this.type;
    }

    @Override
    public Context getContext() {
	return this.context;
    }
}
