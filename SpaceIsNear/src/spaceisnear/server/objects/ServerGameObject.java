// Generated by delombok at Sun Dec 01 13:28:22 MSK 2013
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package spaceisnear.server.objects;

import java.util.*;
import java.util.concurrent.ConcurrentLinkedQueue;
import lombok.*;
import spaceisnear.abstracts.AbstractGameObject;
import spaceisnear.game.components.Component;
import spaceisnear.game.messages.Message;
import spaceisnear.game.objects.GameObjectType;
import spaceisnear.server.ServerContext;

/**
 * @author White Oak
 */
@RequiredArgsConstructor public abstract class ServerGameObject extends AbstractGameObject {

    private final Queue<Message> messages = new ConcurrentLinkedQueue<>();
    @Getter private int id = -1;
    @Getter @Setter private boolean destroyed = false;
    @Getter private final List<Component> components = new ArrayList<>();
    @Getter private final GameObjectType type;
    @Getter private final ServerContext context;

    public void setId(int id) {
	if (this.id == -1) {
	    this.id = id;
	    for (Component component : components) {
		component.setOwnerId(id);
	    }
	}
    }

    public final synchronized void addComponents(Component... a) {
	for (Component component : a) {
	    component.setContext(context);
	}
	this.components.addAll(Arrays.asList(a));
    }

    @Override
    public final void message(Message message) {
	messages.add(message);
    }

    @Override
    public synchronized void process() {
	if (destroyed) {
	    return;
	}
	while (!messages.isEmpty()) {
	    Message message = messages.poll();
	    components.forEach(component -> component.processMessage(message));
	}
    }

    public boolean needsTime() {
	boolean result = false;
	result = components.stream()
		.map((component) -> component.needsTime())
		.reduce(result, (accumulator, _item) -> accumulator | _item);
	return result;
    }
}
