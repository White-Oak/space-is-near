// Generated by delombok at Sun Dec 01 13:28:22 MSK 2013
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package spaceisnear.server;

import spaceisnear.game.messages.Message;
import spaceisnear.server.objects.ServerGameObject;
import spaceisnear.server.objects.Player;
import java.util.*;
import spaceisnear.AbstractGameObject;
import spaceisnear.Context;
import spaceisnear.game.CameraMan;
import spaceisnear.game.layer.AtmosphericLayer;
import spaceisnear.game.layer.ObstaclesLayer;
import spaceisnear.game.layer.TiledLayer;
import spaceisnear.game.messages.DirectedMessage;
import spaceisnear.server.objects.ServerNetworkingObject;

/**
 * @author LPzhelud
 */
public final class ServerContext extends Context {

    public static final int TILE_HEIGHT = 16;
    public static final int TILE_WIDTH = 16;
    private final ServerNetworking networking;
    private final List<AbstractGameObject> objects;
    private final List<Player> players = new LinkedList<>();
    private final TiledLayer tiledLayer;
    private final ObstaclesLayer obstacles;
    private final AtmosphericLayer atmosphere;

    @Override
    public synchronized void sendThemAll(Message m) {
	if (!(m instanceof DirectedMessage)) {
	    for (AbstractGameObject gameObject : objects) {
		gameObject.message(m);
	    }
	}
    }

    @Override
    public synchronized void sendToID(Message m, int id) {
	objects.get(id).message(m);
    }

    public synchronized void addObject(ServerGameObject gameObject) {
	objects.add(gameObject);
	gameObject.setId(objects.size() - 1);
    }

    public synchronized Player addPlayer(int connectionID) {
	Player player = new Player(this, connectionID);
	players.add(player);
	addObject(player);
	return player;
    }

    public Player getPlayer(int id) {
	return (Player) players.get(id);
    }

    @Override
    public CameraMan getCameraMan() {
	return null;
    }

    @java.beans.ConstructorProperties({"networking", "objects", "tiledLayer"})
    public ServerContext(final ServerNetworking networking, final List<AbstractGameObject> objects, final TiledLayer tiledLayer,
	    ObstaclesLayer obstacles,
	    AtmosphericLayer atmosphere) {
	this.networking = networking;
	this.objects = objects;
	this.tiledLayer = tiledLayer;
	this.obstacles = obstacles;
	this.atmosphere = atmosphere;
	addObject(new ServerNetworkingObject(this));
    }

    public ServerNetworking getNetworking() {
	return this.networking;
    }

    @Override
    public List<AbstractGameObject> getObjects() {
	return this.objects;
    }

    public List<Player> getPlayers() {
	return this.players;
    }

    public TiledLayer getTiledLayer() {
	return this.tiledLayer;
    }

    @Override
    public ObstaclesLayer getObstacles() {
	return obstacles;
    }

    @Override
    public AtmosphericLayer getAtmosphere() {
	return atmosphere;
    }

}
